{"version":3,"sources":["config.json","keyEvaluater.js","index.js"],"names":["module","exports","levels","allowedChars","event","expectedCharacter","onSuccess","onFail","input","key","match","length","canvas","document","getElementById","ctx","getContext","currentLevel","currentIndex","playerScore","draw","width","window","innerWidth","height","innerHeight","clearRect","fillStyle","fillRect","font","fillText","substring","onKeyPress","onInputMatches","onInputDoesNotMatch","beginListening","addEventListener","init"],"mappings":";AAAAA,OAAOC,QAAQ,CAACC,OAAO,CAAC;;ACiBvB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhBD,IAAMC,EAAe,mBAEN,EAAA,SAACC,EAAOC,EAAmBC,EAAWC,GAC3CC,IAAAA,EAAQJ,EAAMK,IACdC,EAAQF,EAAME,MAAMP,GAEP,GAAhBO,EAAMC,QAAeD,EAAM,GAAGC,OAAS,IAGjCH,GAASH,EAEdC,EAAUE,GAGVD,MAEP,QAAA,QAAA;;AC0CG,aA3DJ,IAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,sBA0DI,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxDJ,IAAMK,EAASC,SAASC,eAAe,SACjCC,EAAMH,EAAOI,WAAW,MAE1BC,EAAef,EAAO,OAAA,GACtBgB,EAAe,EACfC,EAAc,EAElB,SAASC,IACLR,EAAOS,MAAQC,OAAOC,WACtBX,EAAOY,OAASF,OAAOG,YAEvBV,EAAIW,UAAU,EAAG,EAAGd,EAAOS,MAAOT,EAAOY,QACzCT,EAAIY,UAAY,MAChBZ,EAAIa,SAAS,EAAG,EAAGhB,EAAOS,MAAOT,EAAOY,QAExCT,EAAIY,UAAY,QAChBZ,EAAIc,KAAO,aACXd,EAAIe,SAAS,gBAAkBX,EAAa,GAAI,IAEhDJ,EAAIY,UAAY,QAChBZ,EAAIc,KAAO,aACXd,EAAIe,SAASb,EAAac,UAAUb,EAAcD,EAAaN,QAAS,GAAI,KAGhF,SAASqB,EAAW5B,IACRA,EAAAA,EAAAA,SAAAA,EAAOa,EAAaC,GAAee,EAAgBC,GAG/D,SAASD,EAAezB,GAEP,KAATA,GACAW,MAFJD,GAImBD,EAAaN,SAC5BQ,IACAD,EAAe,GAEnBE,IAGJ,SAASc,EAAoB1B,GACzBU,EAAe,EACfC,EAAc,EACdC,IAGJ,SAASe,IACLtB,SAASuB,iBAAiB,UAAWJ,GACrCnB,SAASuB,iBAAiB,SAAUhB,GAGxC,SAASiB,IACLjB,IACAe,IAGJE","file":"src.0ab0a35f.js","sourceRoot":"..\\src","sourcesContent":["module.exports={levels:[\"The brown dog jumped over the quick but also lazy fox.\"]};","// allow letters, comma, and period\r\nconst allowedChars = /^[a-zA-Z\\. \\,]*$/;\r\n\r\nexport default (event, expectedCharacter, onSuccess, onFail) =>{\r\n    const input = event.key;\r\n    const match = input.match(allowedChars);\r\n\r\n    if(match.length == 0 || match[0].length > 1){\r\n        // ignore things like \"Shift\" or not recognized keys\r\n        return;\r\n    }else if(input == expectedCharacter){\r\n        // found a match!\r\n        onSuccess(input);\r\n    }else{\r\n        // pressed the wrong key\r\n        onFail();\r\n    }\r\n}","import { levels } from './config.json';\r\nimport KeyEval from './keyEvaluater.js';\r\n\r\nconst canvas = document.getElementById(\"entry\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\nlet currentLevel = levels[0];\r\nlet currentIndex = 0;\r\nlet playerScore = 0;\r\n\r\nfunction draw() {\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = \"red\";\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"30px Arial\";\r\n    ctx.fillText(\"Words Typed: \" + playerScore, 10, 50);\r\n\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"30px Arial\";\r\n    ctx.fillText(currentLevel.substring(currentIndex, currentLevel.length), 10, 100);\r\n}\r\n\r\nfunction onKeyPress(event) {\r\n    KeyEval(event, currentLevel[currentIndex], onInputMatches, onInputDoesNotMatch);\r\n}\r\n\r\nfunction onInputMatches(input) {\r\n    currentIndex++;\r\n    if (input == \" \") {\r\n        playerScore++;\r\n    }\r\n    if(currentIndex == currentLevel.length){\r\n        playerScore++;\r\n        currentIndex = 0;\r\n    }\r\n    draw();\r\n}\r\n\r\nfunction onInputDoesNotMatch(input) {\r\n    currentIndex = 0;\r\n    playerScore = 0;\r\n    draw();\r\n}\r\n\r\nfunction beginListening() {\r\n    document.addEventListener('keydown', onKeyPress);\r\n    document.addEventListener(\"resize\", draw);\r\n}\r\n\r\nfunction init() {\r\n    draw();\r\n    beginListening();\r\n}\r\n\r\ninit();\r\n\r\n"]}